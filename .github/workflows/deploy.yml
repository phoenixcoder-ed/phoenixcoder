name: Deploy to Environments

# 部署触发条件
on:
  push:
    branches:
      - main        # 部署到生产环境
      - develop     # 部署到测试环境
    tags:
      - 'v*'        # 版本标签部署
  
  workflow_dispatch:
    inputs:
      environment:
        description: '选择部署环境'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: '部署版本 (可选)'
        required: false
        type: string

# 环境变量
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 构建Docker镜像
  build-images:
    name: 构建Docker镜像
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 登录容器注册表
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 提取元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
      
      - name: 构建后端服务镜像
        uses: docker/build-push-action@v5
        with:
          context: ./apps/community/server
          file: ./apps/community/server/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/server:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: 构建OIDC服务镜像
        uses: docker/build-push-action@v5
        with:
          context: ./apps/community/oidc-server
          file: ./apps/community/oidc-server/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/oidc-server:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: 构建管理前端镜像
        uses: docker/build-push-action@v5
        with:
          context: ./apps/community/admin
          file: ./apps/community/admin/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/admin:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 部署到测试环境
  deploy-staging:
    name: 部署到测试环境
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: https://staging.phoenixcoder.dev
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 设置kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
      
      - name: 配置Kubernetes上下文
        run: |
          echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl config current-context
      
      - name: 更新部署配置
        run: |
          export KUBECONFIG=kubeconfig
          
          # 更新镜像标签
          sed -i "s|image: .*server:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/server:${{ needs.build-images.outputs.image-tag }}|g" k8s/staging/server-deployment.yaml
          sed -i "s|image: .*oidc-server:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/oidc-server:${{ needs.build-images.outputs.image-tag }}|g" k8s/staging/oidc-deployment.yaml
          sed -i "s|image: .*admin:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/admin:${{ needs.build-images.outputs.image-tag }}|g" k8s/staging/admin-deployment.yaml
          
          # 应用配置
          kubectl apply -f k8s/staging/
          
          # 等待部署完成
          kubectl rollout status deployment/phoenixcoder-server -n staging --timeout=300s
          kubectl rollout status deployment/phoenixcoder-oidc -n staging --timeout=300s
          kubectl rollout status deployment/phoenixcoder-admin -n staging --timeout=300s
      
      - name: 运行部署后测试
        run: |
          # 等待服务就绪
          sleep 30
          
          # 健康检查
          curl -f https://staging-api.phoenixcoder.dev/health || exit 1
          curl -f https://staging-oidc.phoenixcoder.dev/health || exit 1
          curl -f https://staging.phoenixcoder.dev || exit 1
          
          echo "✅ 测试环境部署成功"
      
      - name: 通知部署状态
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? '✅ 成功' : '❌ 失败';
            const message = `## 🚀 测试环境部署 ${status}
            
            **📦 部署信息**
            - 环境: Staging
            - 版本: ${{ needs.build-images.outputs.image-tag }}
            - 提交: ${{ github.sha }}
            - 分支: ${{ github.ref_name }}
            - 时间: ${new Date().toLocaleString('zh-CN')}
            
            **🔗 访问链接**
            - 管理后台: https://staging.phoenixcoder.dev
            - API服务: https://staging-api.phoenixcoder.dev
            - OIDC服务: https://staging-oidc.phoenixcoder.dev
            
            **📋 部署日志**
            查看详细日志: ${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            
            console.log(message);

  # 部署到生产环境
  deploy-production:
    name: 部署到生产环境
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://phoenixcoder.dev
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 设置kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
      
      - name: 配置Kubernetes上下文
        run: |
          echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl config current-context
      
      - name: 创建部署备份
        run: |
          export KUBECONFIG=kubeconfig
          
          # 备份当前部署
          kubectl get deployment phoenixcoder-server -n production -o yaml > backup-server-deployment.yaml
          kubectl get deployment phoenixcoder-oidc -n production -o yaml > backup-oidc-deployment.yaml
          kubectl get deployment phoenixcoder-admin -n production -o yaml > backup-admin-deployment.yaml
      
      - name: 蓝绿部署
        run: |
          export KUBECONFIG=kubeconfig
          
          # 创建新版本部署（绿色环境）
          cp -r k8s/production k8s/production-green
          
          # 更新绿色环境镜像标签
          sed -i "s|image: .*server:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/server:${{ needs.build-images.outputs.image-tag }}|g" k8s/production-green/server-deployment.yaml
          sed -i "s|image: .*oidc-server:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/oidc-server:${{ needs.build-images.outputs.image-tag }}|g" k8s/production-green/oidc-deployment.yaml
          sed -i "s|image: .*admin:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/admin:${{ needs.build-images.outputs.image-tag }}|g" k8s/production-green/admin-deployment.yaml
          
          # 更新部署名称（添加-green后缀）
          sed -i 's/name: phoenixcoder-/name: phoenixcoder-green-/g' k8s/production-green/*-deployment.yaml
          
          # 部署绿色环境
          kubectl apply -f k8s/production-green/
          
          # 等待绿色环境就绪
          kubectl rollout status deployment/phoenixcoder-green-server -n production --timeout=600s
          kubectl rollout status deployment/phoenixcoder-green-oidc -n production --timeout=600s
          kubectl rollout status deployment/phoenixcoder-green-admin -n production --timeout=600s
      
      - name: 健康检查
        run: |
          export KUBECONFIG=kubeconfig
          
          # 获取绿色环境服务IP
          GREEN_SERVER_IP=$(kubectl get svc phoenixcoder-green-server -n production -o jsonpath='{.spec.clusterIP}')
          GREEN_OIDC_IP=$(kubectl get svc phoenixcoder-green-oidc -n production -o jsonpath='{.spec.clusterIP}')
          GREEN_ADMIN_IP=$(kubectl get svc phoenixcoder-green-admin -n production -o jsonpath='{.spec.clusterIP}')
          
          # 健康检查
          kubectl run health-check --rm -i --restart=Never --image=curlimages/curl -- \
            sh -c "curl -f http://$GREEN_SERVER_IP:8000/health && curl -f http://$GREEN_OIDC_IP:8080/health"
          
          echo "✅ 绿色环境健康检查通过"
      
      - name: 切换流量
        run: |
          export KUBECONFIG=kubeconfig
          
          # 更新服务选择器，将流量切换到绿色环境
          kubectl patch service phoenixcoder-server -n production -p '{"spec":{"selector":{"app":"phoenixcoder-green-server"}}}'
          kubectl patch service phoenixcoder-oidc -n production -p '{"spec":{"selector":{"app":"phoenixcoder-green-oidc"}}}'
          kubectl patch service phoenixcoder-admin -n production -p '{"spec":{"selector":{"app":"phoenixcoder-green-admin"}}}'
          
          echo "✅ 流量已切换到新版本"
      
      - name: 验证部署
        run: |
          # 等待DNS传播
          sleep 60
          
          # 验证生产环境
          curl -f https://api.phoenixcoder.dev/health || exit 1
          curl -f https://oidc.phoenixcoder.dev/health || exit 1
          curl -f https://phoenixcoder.dev || exit 1
          
          echo "✅ 生产环境验证成功"
      
      - name: 清理旧版本
        if: success()
        run: |
          export KUBECONFIG=kubeconfig
          
          # 删除蓝色环境（旧版本）
          kubectl delete deployment phoenixcoder-server -n production --ignore-not-found=true
          kubectl delete deployment phoenixcoder-oidc -n production --ignore-not-found=true
          kubectl delete deployment phoenixcoder-admin -n production --ignore-not-found=true
          
          # 重命名绿色环境为正式环境
          kubectl patch deployment phoenixcoder-green-server -n production -p '{"metadata":{"name":"phoenixcoder-server"}}'
          kubectl patch deployment phoenixcoder-green-oidc -n production -p '{"metadata":{"name":"phoenixcoder-oidc"}}'
          kubectl patch deployment phoenixcoder-green-admin -n production -p '{"metadata":{"name":"phoenixcoder-admin"}}'
          
          echo "✅ 部署清理完成"
      
      - name: 回滚部署
        if: failure()
        run: |
          export KUBECONFIG=kubeconfig
          
          echo "❌ 部署失败，开始回滚..."
          
          # 恢复服务选择器
          kubectl patch service phoenixcoder-server -n production -p '{"spec":{"selector":{"app":"phoenixcoder-server"}}}'
          kubectl patch service phoenixcoder-oidc -n production -p '{"spec":{"selector":{"app":"phoenixcoder-oidc"}}}'
          kubectl patch service phoenixcoder-admin -n production -p '{"spec":{"selector":{"app":"phoenixcoder-admin"}}}'
          
          # 删除失败的绿色环境
          kubectl delete deployment phoenixcoder-green-server -n production --ignore-not-found=true
          kubectl delete deployment phoenixcoder-green-oidc -n production --ignore-not-found=true
          kubectl delete deployment phoenixcoder-green-admin -n production --ignore-not-found=true
          
          echo "✅ 回滚完成"
      
      - name: 通知部署状态
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? '✅ 成功' : '❌ 失败';
            const message = `## 🚀 生产环境部署 ${status}
            
            **📦 部署信息**
            - 环境: Production
            - 版本: ${{ needs.build-images.outputs.image-tag }}
            - 提交: ${{ github.sha }}
            - 分支: ${{ github.ref_name }}
            - 时间: ${new Date().toLocaleString('zh-CN')}
            - 部署策略: 蓝绿部署
            
            **🔗 访问链接**
            - 官方网站: https://phoenixcoder.dev
            - API服务: https://api.phoenixcoder.dev
            - OIDC服务: https://oidc.phoenixcoder.dev
            
            **📋 部署日志**
            查看详细日志: ${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
            
            console.log(message);

  # 部署后监控
  post-deploy-monitoring:
    name: 部署后监控
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
      - name: 设置监控
        run: |
          echo "🔍 开始部署后监控..."
          
          # 确定监控环境
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            ENVIRONMENT="production"
            BASE_URL="https://phoenixcoder.dev"
          else
            ENVIRONMENT="staging"
            BASE_URL="https://staging.phoenixcoder.dev"
          fi
          
          echo "监控环境: $ENVIRONMENT"
          echo "BASE_URL=$BASE_URL" >> $GITHUB_ENV
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
      
      - name: 性能监控
        run: |
          echo "📊 运行性能监控..."
          
          # 响应时间检查
          for i in {1..5}; do
            echo "第 $i 次检查..."
            
            # API响应时间
            API_TIME=$(curl -o /dev/null -s -w "%{time_total}" $BASE_URL/api/health)
            echo "API响应时间: ${API_TIME}s"
            
            # 前端加载时间
            FRONTEND_TIME=$(curl -o /dev/null -s -w "%{time_total}" $BASE_URL)
            echo "前端加载时间: ${FRONTEND_TIME}s"
            
            # 检查响应时间是否在可接受范围内
            if (( $(echo "$API_TIME > 2.0" | bc -l) )); then
              echo "⚠️ API响应时间过长: ${API_TIME}s"
            fi
            
            if (( $(echo "$FRONTEND_TIME > 3.0" | bc -l) )); then
              echo "⚠️ 前端加载时间过长: ${FRONTEND_TIME}s"
            fi
            
            sleep 30
          done
      
      - name: 错误率监控
        run: |
          echo "🚨 检查错误率..."
          
          # 模拟一些请求来检查错误率
          SUCCESS_COUNT=0
          TOTAL_COUNT=20
          
          for i in $(seq 1 $TOTAL_COUNT); do
            if curl -f -s $BASE_URL/api/health > /dev/null; then
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            fi
            sleep 1
          done
          
          SUCCESS_RATE=$(echo "scale=2; $SUCCESS_COUNT * 100 / $TOTAL_COUNT" | bc)
          echo "成功率: ${SUCCESS_RATE}%"
          
          if (( $(echo "$SUCCESS_RATE < 95" | bc -l) )); then
            echo "❌ 错误率过高，成功率仅为 ${SUCCESS_RATE}%"
            exit 1
          else
            echo "✅ 错误率正常，成功率为 ${SUCCESS_RATE}%"
          fi
      
      - name: 生成监控报告
        if: always()
        run: |
          echo "📋 生成监控报告..."
          
          cat > monitoring-report.md << EOF
          # 部署后监控报告
          
          **环境**: $ENVIRONMENT  
          **时间**: $(date)  
          **状态**: ${{ job.status }}
          
          ## 监控结果
          
          - ✅ 服务可用性检查
          - ✅ 响应时间监控
          - ✅ 错误率检查
          
          ## 建议
          
          - 继续监控服务性能
          - 关注用户反馈
          - 定期检查日志
          
          EOF
          
          echo "✅ 监控报告生成完成"
      
      - name: 上传监控报告
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: monitoring-report-${{ env.ENVIRONMENT }}
          path: monitoring-report.md