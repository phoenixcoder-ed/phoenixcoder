#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
PhoenixCoder项目管理模板更新脚本
根据项目实际情况填写具体的项目管理数据
"""

import pandas as pd
from openpyxl import load_workbook
from datetime import datetime, timedelta
import os

def update_project_template():
    """更新项目管理模板"""
    
    # 文件路径
    template_file = "个人项目管理模板.xlsx"
    
    if not os.path.exists(template_file):
        print(f"错误：找不到文件 {template_file}")
        return
    
    try:
        # 加载工作簿
        wb = load_workbook(template_file)
        
        # 更新项目概况表
        update_project_overview(wb)
        
        # 更新需求收集表
        update_requirements_sheet(wb)
        
        # 更新任务分解表
        update_task_breakdown(wb)
        
        # 更新进度跟踪表
        update_progress_tracking(wb)
        
        # 更新里程碑规划表
        update_milestone_planning(wb)
        
        # 更新风险评估表
        update_risk_assessment(wb)
        
        # 保存文件
        wb.save(template_file)
        print(f"项目管理模板已更新：{template_file}")
        
    except Exception as e:
        print(f"更新模板时出错：{str(e)}")

def update_project_overview(wb):
    """更新项目概况表"""
    if "项目概况" in wb.sheetnames:
        ws = wb["项目概况"]
        
        # 项目基本信息
        project_info = {
            "项目名称": "PhoenixCoder - 技能成长与项目实战平台",
            "项目类型": "技能成长、项目实战、自我认证平台",
            "项目负责人": "开发团队",
            "开始日期": "2024-01-01",
            "预计结束日期": "2024-12-31",
            "项目状态": "开发中",
            "技术栈": "后端(FastAPI+Python)、前端(React+TypeScript+Tailwind)、小程序(Taro)",
            "架构模式": "社区版+企业版双版本，微服务架构",
            "部署方式": "Kubernetes + Docker容器化部署"
        }
        
        # 填写项目信息（假设从B2开始填写）
        row = 2
        for key, value in project_info.items():
            ws[f"A{row}"] = key
            ws[f"B{row}"] = value
            row += 1

def update_requirements_sheet(wb):
    """更新需求收集表"""
    if "需求收集" in wb.sheetnames:
        ws = wb["需求收集"]
        
        # 功能需求列表
        requirements = [
            {
                "需求ID": "REQ-001",
                "需求名称": "用户认证系统",
                "需求描述": "支持微信授权登录、OIDC认证、用户注册和身份验证",
                "优先级": "P0",
                "需求来源": "业务流程文档",
                "状态": "已实现",
                "负责人": "后端团队"
            },
            {
                "需求ID": "REQ-002",
                "需求名称": "任务管理系统",
                "需求描述": "任务发布、浏览、接单、进度跟踪、任务确认",
                "优先级": "P0",
                "需求来源": "业务流程文档",
                "状态": "已实现",
                "负责人": "后端团队"
            },
            {
                "需求ID": "REQ-003",
                "需求名称": "技能评估系统",
                "需求描述": "技能认证、技能等级评估、技能成长跟踪",
                "优先级": "P0",
                "需求来源": "业务流程文档",
                "状态": "已实现",
                "负责人": "后端团队"
            },
            {
                "需求ID": "REQ-004",
                "需求名称": "知识库系统",
                "需求描述": "学习路径、学习内容管理、学习进度跟踪",
                "优先级": "P1",
                "需求来源": "业务流程文档",
                "状态": "已实现",
                "负责人": "后端团队"
            },
            {
                "需求ID": "REQ-005",
                "需求名称": "挑战管理系统",
                "需求描述": "挑战任务发布、参与、评估和激励机制",
                "优先级": "P1",
                "需求来源": "业务流程文档",
                "状态": "开发中",
                "负责人": "后端团队"
            },
            {
                "需求ID": "REQ-006",
                "需求名称": "社区互动功能",
                "需求描述": "技术文章发布、评论、点赞、分享功能",
                "优先级": "P2",
                "需求来源": "业务流程文档",
                "状态": "待开发",
                "负责人": "前端团队"
            },
            {
                "需求ID": "REQ-007",
                "需求名称": "管理后台",
                "需求描述": "用户管理、任务管理、内容管理、数据分析",
                "优先级": "P0",
                "需求来源": "业务流程文档",
                "状态": "已实现",
                "负责人": "前端团队"
            },
            {
                "需求ID": "REQ-008",
                "需求名称": "小程序端",
                "需求描述": "移动端任务浏览、接单、个人中心功能",
                "优先级": "P1",
                "需求来源": "业务流程文档",
                "状态": "开发中",
                "负责人": "前端团队"
            },
            {
                "需求ID": "REQ-009",
                "需求名称": "财务管理系统",
                "需求描述": "任务报酬管理、收入统计、支付集成",
                "优先级": "P2",
                "需求来源": "业务流程文档",
                "状态": "待开发",
                "负责人": "后端团队"
            },
            {
                "需求ID": "REQ-010",
                "需求名称": "通知中心",
                "需求描述": "系统通知、任务通知、消息推送",
                "优先级": "P2",
                "需求来源": "业务流程文档",
                "状态": "开发中",
                "负责人": "后端团队"
            }
        ]
        
        # 设置表头
        headers = ["需求ID", "需求名称", "需求描述", "优先级", "需求来源", "状态", "负责人"]
        for col, header in enumerate(headers, 1):
            ws.cell(row=1, column=col, value=header)
        
        # 填写需求数据
        for row, req in enumerate(requirements, 2):
            for col, header in enumerate(headers, 1):
                ws.cell(row=row, column=col, value=req[header])

def update_task_breakdown(wb):
    """更新任务分解表"""
    if "任务分解" in wb.sheetnames:
        ws = wb["任务分解"]
        
        # 任务分解列表
        tasks = [
            {
                "任务ID": "TASK-001",
                "任务名称": "OIDC服务开发",
                "所属模块": "用户认证系统",
                "预估工时(小时)": 40,
                "实际工时(小时)": 45,
                "开始日期": "2024-01-15",
                "结束日期": "2024-02-01",
                "状态": "已完成",
                "负责人": "张三",
                "完成度(%)": 100
            },
            {
                "任务ID": "TASK-002",
                "任务名称": "任务API开发",
                "所属模块": "任务管理系统",
                "预估工时(小时)": 60,
                "实际工时(小时)": 55,
                "开始日期": "2024-02-01",
                "结束日期": "2024-02-20",
                "状态": "已完成",
                "负责人": "李四",
                "完成度(%)": 100
            },
            {
                "任务ID": "TASK-003",
                "任务名称": "技能评估API开发",
                "所属模块": "技能评估系统",
                "预估工时(小时)": 50,
                "实际工时(小时)": 48,
                "开始日期": "2024-02-15",
                "结束日期": "2024-03-05",
                "状态": "已完成",
                "负责人": "王五",
                "完成度(%)": 100
            },
            {
                "任务ID": "TASK-004",
                "任务名称": "管理后台前端开发",
                "所属模块": "管理后台",
                "预估工时(小时)": 80,
                "实际工时(小时)": 75,
                "开始日期": "2024-03-01",
                "结束日期": "2024-03-25",
                "状态": "已完成",
                "负责人": "赵六",
                "完成度(%)": 100
            },
            {
                "任务ID": "TASK-005",
                "任务名称": "小程序开发",
                "所属模块": "小程序端",
                "预估工时(小时)": 100,
                "实际工时(小时)": 85,
                "开始日期": "2024-03-15",
                "结束日期": "2024-04-30",
                "状态": "进行中",
                "负责人": "钱七",
                "完成度(%)": 75
            },
            {
                "任务ID": "TASK-006",
                "任务名称": "挑战系统开发",
                "所属模块": "挑战管理系统",
                "预估工时(小时)": 70,
                "实际工时(小时)": 35,
                "开始日期": "2024-04-01",
                "结束日期": "2024-05-15",
                "状态": "进行中",
                "负责人": "孙八",
                "完成度(%)": 50
            },
            {
                "任务ID": "TASK-007",
                "任务名称": "社区功能开发",
                "所属模块": "社区互动功能",
                "预估工时(小时)": 90,
                "实际工时(小时)": 0,
                "开始日期": "2024-05-01",
                "结束日期": "2024-06-30",
                "状态": "待开始",
                "负责人": "周九",
                "完成度(%)": 0
            },
            {
                "任务ID": "TASK-008",
                "任务名称": "财务系统开发",
                "所属模块": "财务管理系统",
                "预估工时(小时)": 80,
                "实际工时(小时)": 0,
                "开始日期": "2024-06-01",
                "结束日期": "2024-07-31",
                "状态": "待开始",
                "负责人": "吴十",
                "完成度(%)": 0
            }
        ]
        
        # 设置表头
        headers = ["任务ID", "任务名称", "所属模块", "预估工时(小时)", "实际工时(小时)", 
                  "开始日期", "结束日期", "状态", "负责人", "完成度(%)"]
        for col, header in enumerate(headers, 1):
            ws.cell(row=1, column=col, value=header)
        
        # 填写任务数据
        for row, task in enumerate(tasks, 2):
            for col, header in enumerate(headers, 1):
                ws.cell(row=row, column=col, value=task[header])

def update_progress_tracking(wb):
    """更新进度跟踪表"""
    if "进度跟踪" in wb.sheetnames:
        ws = wb["进度跟踪"]
        
        # 进度跟踪数据
        progress_data = [
            {
                "模块名称": "用户认证系统",
                "总任务数": 3,
                "已完成任务数": 3,
                "进行中任务数": 0,
                "待开始任务数": 0,
                "完成度(%)": 100,
                "预计完成日期": "2024-02-01",
                "实际完成日期": "2024-02-01",
                "状态": "已完成"
            },
            {
                "模块名称": "任务管理系统",
                "总任务数": 4,
                "已完成任务数": 4,
                "进行中任务数": 0,
                "待开始任务数": 0,
                "完成度(%)": 100,
                "预计完成日期": "2024-02-20",
                "实际完成日期": "2024-02-20",
                "状态": "已完成"
            },
            {
                "模块名称": "技能评估系统",
                "总任务数": 3,
                "已完成任务数": 3,
                "进行中任务数": 0,
                "待开始任务数": 0,
                "完成度(%)": 100,
                "预计完成日期": "2024-03-05",
                "实际完成日期": "2024-03-05",
                "状态": "已完成"
            },
            {
                "模块名称": "管理后台",
                "总任务数": 5,
                "已完成任务数": 5,
                "进行中任务数": 0,
                "待开始任务数": 0,
                "完成度(%)": 100,
                "预计完成日期": "2024-03-25",
                "实际完成日期": "2024-03-25",
                "状态": "已完成"
            },
            {
                "模块名称": "小程序端",
                "总任务数": 4,
                "已完成任务数": 3,
                "进行中任务数": 1,
                "待开始任务数": 0,
                "完成度(%)": 75,
                "预计完成日期": "2024-04-30",
                "实际完成日期": "",
                "状态": "进行中"
            },
            {
                "模块名称": "挑战管理系统",
                "总任务数": 3,
                "已完成任务数": 1,
                "进行中任务数": 1,
                "待开始任务数": 1,
                "完成度(%)": 50,
                "预计完成日期": "2024-05-15",
                "实际完成日期": "",
                "状态": "进行中"
            },
            {
                "模块名称": "社区互动功能",
                "总任务数": 4,
                "已完成任务数": 0,
                "进行中任务数": 0,
                "待开始任务数": 4,
                "完成度(%)": 0,
                "预计完成日期": "2024-06-30",
                "实际完成日期": "",
                "状态": "待开始"
            },
            {
                "模块名称": "财务管理系统",
                "总任务数": 3,
                "已完成任务数": 0,
                "进行中任务数": 0,
                "待开始任务数": 3,
                "完成度(%)": 0,
                "预计完成日期": "2024-07-31",
                "实际完成日期": "",
                "状态": "待开始"
            }
        ]
        
        # 设置表头
        headers = ["模块名称", "总任务数", "已完成任务数", "进行中任务数", "待开始任务数", 
                  "完成度(%)", "预计完成日期", "实际完成日期", "状态"]
        for col, header in enumerate(headers, 1):
            ws.cell(row=1, column=col, value=header)
        
        # 填写进度数据
        for row, progress in enumerate(progress_data, 2):
            for col, header in enumerate(headers, 1):
                ws.cell(row=row, column=col, value=progress[header])

def update_milestone_planning(wb):
    """更新里程碑规划表"""
    if "里程碑规划" in wb.sheetnames:
        ws = wb["里程碑规划"]
        
        # 里程碑数据
        milestones = [
            {
                "里程碑名称": "MVP版本发布",
                "描述": "完成核心功能：用户认证、任务管理、技能评估",
                "计划日期": "2024-03-31",
                "实际日期": "2024-03-31",
                "状态": "已完成",
                "关键交付物": "用户认证系统、任务管理API、技能评估功能",
                "负责人": "项目经理"
            },
            {
                "里程碑名称": "管理后台上线",
                "描述": "完成管理后台所有功能模块开发",
                "计划日期": "2024-04-15",
                "实际日期": "2024-04-10",
                "状态": "已完成",
                "关键交付物": "用户管理、任务管理、内容管理、数据分析",
                "负责人": "前端负责人"
            },
            {
                "里程碑名称": "小程序Beta版",
                "描述": "小程序核心功能开发完成，进入测试阶段",
                "计划日期": "2024-05-31",
                "实际日期": "",
                "状态": "进行中",
                "关键交付物": "任务浏览、接单、个人中心功能",
                "负责人": "移动端负责人"
            },
            {
                "里程碑名称": "挑战系统上线",
                "描述": "完成挑战管理系统开发和测试",
                "计划日期": "2024-06-30",
                "实际日期": "",
                "状态": "计划中",
                "关键交付物": "挑战发布、参与、评估、激励机制",
                "负责人": "后端负责人"
            },
            {
                "里程碑名称": "社区功能上线",
                "描述": "完成社区互动功能开发",
                "计划日期": "2024-08-31",
                "实际日期": "",
                "状态": "计划中",
                "关键交付物": "文章发布、评论、点赞、分享功能",
                "负责人": "全栈团队"
            },
            {
                "里程碑名称": "正式版发布",
                "描述": "所有功能模块完成，系统正式上线",
                "计划日期": "2024-12-31",
                "实际日期": "",
                "状态": "计划中",
                "关键交付物": "完整的PhoenixCoder平台",
                "负责人": "项目经理"
            }
        ]
        
        # 设置表头
        headers = ["里程碑名称", "描述", "计划日期", "实际日期", "状态", "关键交付物", "负责人"]
        for col, header in enumerate(headers, 1):
            ws.cell(row=1, column=col, value=header)
        
        # 填写里程碑数据
        for row, milestone in enumerate(milestones, 2):
            for col, header in enumerate(headers, 1):
                ws.cell(row=row, column=col, value=milestone[header])

def update_risk_assessment(wb):
    """更新风险评估表"""
    if "风险评估" in wb.sheetnames:
        ws = wb["风险评估"]
        
        # 风险评估数据
        risks = [
            {
                "风险ID": "RISK-001",
                "风险名称": "技术栈学习成本",
                "风险描述": "团队对新技术栈(FastAPI、Taro)不够熟悉",
                "风险等级": "中",
                "影响程度": "中",
                "发生概率": "中",
                "应对策略": "提前技术培训、代码审查、技术分享",
                "负责人": "技术负责人",
                "状态": "已缓解"
            },
            {
                "风险ID": "RISK-002",
                "风险名称": "需求变更频繁",
                "风险描述": "业务需求可能频繁变更影响开发进度",
                "风险等级": "高",
                "影响程度": "高",
                "发生概率": "中",
                "应对策略": "需求冻结机制、变更控制流程",
                "负责人": "项目经理",
                "状态": "监控中"
            },
            {
                "风险ID": "RISK-003",
                "风险名称": "人员流失",
                "风险描述": "关键开发人员离职影响项目进度",
                "风险等级": "高",
                "影响程度": "高",
                "发生概率": "低",
                "应对策略": "知识文档化、代码规范、备用人员培养",
                "负责人": "人事经理",
                "状态": "预防中"
            },
            {
                "风险ID": "RISK-004",
                "风险名称": "第三方服务依赖",
                "风险描述": "微信API、支付接口等第三方服务不稳定",
                "风险等级": "中",
                "影响程度": "中",
                "发生概率": "中",
                "应对策略": "备用方案、服务监控、降级策略",
                "负责人": "架构师",
                "状态": "监控中"
            },
            {
                "风险ID": "RISK-005",
                "风险名称": "性能瓶颈",
                "风险描述": "用户量增长导致系统性能问题",
                "风险等级": "中",
                "影响程度": "高",
                "发生概率": "中",
                "应对策略": "性能测试、缓存优化、数据库优化",
                "负责人": "架构师",
                "状态": "预防中"
            },
            {
                "风险ID": "RISK-006",
                "风险名称": "安全漏洞",
                "风险描述": "系统存在安全漏洞被恶意攻击",
                "风险等级": "高",
                "影响程度": "高",
                "发生概率": "低",
                "应对策略": "安全审计、渗透测试、安全培训",
                "负责人": "安全专家",
                "状态": "预防中"
            }
        ]
        
        # 设置表头
        headers = ["风险ID", "风险名称", "风险描述", "风险等级", "影响程度", 
                  "发生概率", "应对策略", "负责人", "状态"]
        for col, header in enumerate(headers, 1):
            ws.cell(row=1, column=col, value=header)
        
        # 填写风险数据
        for row, risk in enumerate(risks, 2):
            for col, header in enumerate(headers, 1):
                ws.cell(row=row, column=col, value=risk[header])

if __name__ == "__main__":
    update_project_template()