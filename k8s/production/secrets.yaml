# Production Secrets Configuration Template
# WARNING: This file contains sensitive information templates.
# Replace all placeholder values with actual production secrets before applying.
# Never commit actual secrets to version control.

apiVersion: v1
kind: Secret
metadata:
  name: phoenixcoder-secrets
  namespace: production
  labels:
    app: phoenixcoder
    environment: production
type: Opaque
data:
  # Database connection string (base64 encoded)
  # Format: postgresql://username:password@host:port/database?sslmode=require
  database-url: cG9zdGdyZXNxbDovL3Bob2VuaXhjb2Rlcl9wcm9kOnByb2RfcGFzc3dvcmRAcG9zdGdyZXMucHJvZHVjdGlvbi5zdmMuY2x1c3Rlci5sb2NhbDo1NDMyL3Bob2VuaXhjb2Rlcl9wcm9kP3NzbG1vZGU9cmVxdWlyZQ==
  
  # Redis connection string (base64 encoded)
  # Format: redis://password@host:port/db
  redis-url: cmVkaXM6Ly9wcm9kX3JlZGlzX3Bhc3N3b3JkQHJlZGlzLnByb2R1Y3Rpb24uc3ZjLmNsdXN0ZXIubG9jYWw6NjM3OS8w
  
  # JWT signing secret (base64 encoded)
  # Generate with: openssl rand -base64 64
  jwt-secret: WW91cl9zdXBlcl9zZWN1cmVfand0X3NpZ25pbmdfc2VjcmV0X2Zvcl9wcm9kdWN0aW9uX2Vudmlyb25tZW50XzEyMzQ1Njc4OTA=
  
  # OIDC client secret (base64 encoded)
  oidc-client-secret: WW91cl9vaWRjX2NsaWVudF9zZWNyZXRfZm9yX3Byb2R1Y3Rpb25fZW52aXJvbm1lbnRfMTIzNDU2Nzg5MA==
  
  # Email service password (base64 encoded)
  email-password: WW91cl9lbWFpbF9zZXJ2aWNlX3Bhc3N3b3JkX2Zvcl9wcm9kdWN0aW9uXzEyMzQ1Njc4OTA=
  
  # WeChat Mini Program App Secret (base64 encoded)
  wechat-app-secret: WW91cl93ZWNoYXRfbWluaV9wcm9ncmFtX2FwcF9zZWNyZXRfZm9yX3Byb2R1Y3Rpb25fMTIzNDU2Nzg5MA==
  
  # File storage access key (base64 encoded)
  storage-access-key: WW91cl9zMF9hY2Nlc3Nfa2V5X2Zvcl9wcm9kdWN0aW9uX2Vudmlyb25tZW50XzEyMzQ1Njc4OTA=
  
  # File storage secret key (base64 encoded)
  storage-secret-key: WW91cl9zM19zZWNyZXRfa2V5X2Zvcl9wcm9kdWN0aW9uX2Vudmlyb25tZW50XzEyMzQ1Njc4OTA=
  
  # Sentry DSN for backend error tracking (base64 encoded)
  sentry-dsn: aHR0cHM6Ly95b3VyX3NlbnRyeV9kc25fZm9yX2JhY2tlbmRfcHJvZHVjdGlvbl8xMjM0NTY3ODkwQHNlbnRyeS5pbw==
  
  # Sentry DSN for frontend error tracking (base64 encoded)
  sentry-frontend-dsn: aHR0cHM6Ly95b3VyX3NlbnRyeV9kc25fZm9yX2Zyb250ZW5kX3Byb2R1Y3Rpb25fMTIzNDU2Nzg5MEBzZW50cnkuaW8=
  
  # GitHub OAuth App credentials (base64 encoded)
  github-client-id: WW91cl9naXRodWJfY2xpZW50X2lkX2Zvcl9wcm9kdWN0aW9uXzEyMzQ1Njc4OTA=
  github-client-secret: WW91cl9naXRodWJfY2xpZW50X3NlY3JldF9mb3JfcHJvZHVjdGlvbl8xMjM0NTY3ODkw
  
  # Google OAuth App credentials (base64 encoded)
  google-client-id: WW91cl9nb29nbGVfY2xpZW50X2lkX2Zvcl9wcm9kdWN0aW9uXzEyMzQ1Njc4OTAuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb20=
  google-client-secret: WW91cl9nb29nbGVfY2xpZW50X3NlY3JldF9mb3JfcHJvZHVjdGlvbl8xMjM0NTY3ODkw
  
  # LinkedIn OAuth App credentials (base64 encoded)
  linkedin-client-id: WW91cl9saW5rZWRpbl9jbGllbnRfaWRfZm9yX3Byb2R1Y3Rpb25fMTIzNDU2Nzg5MA==
  linkedin-client-secret: WW91cl9saW5rZWRpbl9jbGllbnRfc2VjcmV0X2Zvcl9wcm9kdWN0aW9uXzEyMzQ1Njc4OTA=
  
  # Payment gateway credentials (base64 encoded)
  stripe-secret-key: c2tfdGVzdF95b3VyX3N0cmlwZV9zZWNyZXRfa2V5X2Zvcl9wcm9kdWN0aW9uXzEyMzQ1Njc4OTA=
  stripe-webhook-secret: d2hzZWNfeW91cl9zdHJpcGVfd2ViaG9va19zZWNyZXRfZm9yX3Byb2R1Y3Rpb25fMTIzNDU2Nzg5MA==
  
  # Monitoring and alerting credentials (base64 encoded)
  prometheus-password: WW91cl9wcm9tZXRoZXVzX3Bhc3N3b3JkX2Zvcl9wcm9kdWN0aW9uXzEyMzQ1Njc4OTA=
  grafana-admin-password: WW91cl9ncmFmYW5hX2FkbWluX3Bhc3N3b3JkX2Zvcl9wcm9kdWN0aW9uXzEyMzQ1Njc4OTA=
  
  # Slack webhook for notifications (base64 encoded)
  slack-webhook-url: aHR0cHM6Ly9ob29rcy5zbGFjay5jb20vc2VydmljZXMveW91cl9zbGFja193ZWJob29rX3VybF9mb3JfcHJvZHVjdGlvbl8xMjM0NTY3ODkw
  
  # API rate limiting bypass token (base64 encoded)
  rate-limit-bypass-token: WW91cl9yYXRlX2xpbWl0X2J5cGFzc190b2tlbl9mb3JfcHJvZHVjdGlvbl8xMjM0NTY3ODkw
  
  # Encryption key for sensitive data (base64 encoded)
  encryption-key: WW91cl9lbmNyeXB0aW9uX2tleV9mb3Jfc2Vuc2l0aXZlX2RhdGFfcHJvZHVjdGlvbl8xMjM0NTY3ODkw
  
  # Backup service credentials (base64 encoded)
  backup-access-key: WW91cl9iYWNrdXBfc2VydmljZV9hY2Nlc3Nfa2V5X2Zvcl9wcm9kdWN0aW9uXzEyMzQ1Njc4OTA=
  backup-secret-key: WW91cl9iYWNrdXBfc2VydmljZV9zZWNyZXRfa2V5X2Zvcl9wcm9kdWN0aW9uXzEyMzQ1Njc4OTA=

---
# TLS Certificate Secret
# This will be automatically managed by cert-manager
apiVersion: v1
kind: Secret
metadata:
  name: production-server-tls
  namespace: production
  labels:
    app: phoenixcoder
    environment: production
    component: tls
type: kubernetes.io/tls
data:
  # These will be automatically populated by cert-manager
  tls.crt: ""
  tls.key: ""

---
apiVersion: v1
kind: Secret
metadata:
  name: production-oidc-tls
  namespace: production
  labels:
    app: phoenixcoder
    environment: production
    component: tls
type: kubernetes.io/tls
data:
  # These will be automatically populated by cert-manager
  tls.crt: ""
  tls.key: ""

---
apiVersion: v1
kind: Secret
metadata:
  name: production-admin-tls
  namespace: production
  labels:
    app: phoenixcoder
    environment: production
    component: tls
type: kubernetes.io/tls
data:
  # These will be automatically populated by cert-manager
  tls.crt: ""
  tls.key: ""

# Instructions for generating actual secrets:
# 
# 1. Database URL:
#    echo -n "postgresql://username:password@host:port/database?sslmode=require" | base64
# 
# 2. JWT Secret:
#    openssl rand -base64 64 | tr -d '\n' | base64
# 
# 3. Other secrets:
#    echo -n "your_actual_secret_value" | base64
# 
# 4. Apply secrets:
#    kubectl apply -f secrets.yaml
# 
# 5. Verify secrets:
#    kubectl get secrets -n production
#    kubectl describe secret phoenixcoder-secrets -n production
# 
# Security Notes:
# - Never commit actual secrets to version control
# - Use external secret management tools like HashiCorp Vault in production
# - Rotate secrets regularly
# - Monitor secret access and usage
# - Use RBAC to limit access to secrets