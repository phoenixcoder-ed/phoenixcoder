#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
填充PhoenixCoder项目真实数据到Excel模板
"""

import pandas as pd
import os
from datetime import datetime, timedelta
import numpy as np

def fill_project_data():
    """填充PhoenixCoder项目真实数据"""
    
    excel_file = "个人项目管理模板.xlsx"
    
    if not os.path.exists(excel_file):
        print(f"❌ 文件不存在: {excel_file}")
        return
    
    print(f"📊 正在填充PhoenixCoder项目数据到: {excel_file}")
    print("=" * 80)
    
    try:
        # 使用ExcelWriter来更新多个工作表
        with pd.ExcelWriter(excel_file, engine='openpyxl', mode='a', if_sheet_exists='replace') as writer:
            
            # 1. 需求收集表
            requirements_data = {
                '需求ID': ['REQ-001', 'REQ-002', 'REQ-003', 'REQ-004', 'REQ-005', 'REQ-006', 'REQ-007', 'REQ-008', 'REQ-009', 'REQ-010'],
                '需求名称': [
                    '用户注册登录系统',
                    '任务大厅功能',
                    '技能认证体系',
                    '成长挑战系统',
                    '知识库管理',
                    '用户管理后台',
                    '任务管理后台',
                    '内容管理后台',
                    '社区互动功能',
                    '数据统计分析'
                ],
                '需求描述': [
                    '支持微信授权登录，用户身份验证，Token管理',
                    '任务浏览、筛选、搜索、接单申请功能',
                    '技能评估、认证流程、证书管理',
                    '挑战任务、技能成长、勋章体系',
                    '学习内容管理、学习路径、进度跟踪',
                    '用户信息管理、权限控制、状态管理',
                    '任务发布、审核、分配、状态跟踪',
                    '文章管理、分类管理、内容审核',
                    '技术文章发布、评论、点赞、分享',
                    '用户行为分析、任务统计、平台数据报表'
                ],
                '需求来源': ['产品规划', '产品规划', '产品规划', '产品规划', '产品规划', '产品规划', '产品规划', '产品规划', '产品规划', '产品规划'],
                '提出人': ['产品经理', '产品经理', '产品经理', '产品经理', '产品经理', '产品经理', '产品经理', '产品经理', '产品经理', '产品经理'],
                '提出日期': ['2024-01-15', '2024-01-15', '2024-01-20', '2024-01-25', '2024-02-01', '2024-02-05', '2024-02-10', '2024-02-15', '2024-02-20', '2024-02-25'],
                '需求类型': ['functional', 'functional', 'functional', 'functional', 'functional', 'functional', 'functional', 'functional', 'functional', 'functional']
            }
            requirements_df = pd.DataFrame(requirements_data)
            requirements_df.to_excel(writer, sheet_name='📋需求收集', index=False)
            print("✅ 已填充需求收集表")
            
            # 2. 需求优先级表
            priority_data = {
                '需求ID': ['REQ-001', 'REQ-002', 'REQ-003', 'REQ-004', 'REQ-005', 'REQ-006', 'REQ-007', 'REQ-008', 'REQ-009', 'REQ-010'],
                '需求名称': requirements_data['需求名称'],
                '业务价值': [9, 10, 8, 7, 6, 8, 9, 7, 5, 6],
                '技术复杂度': [7, 8, 9, 6, 5, 6, 7, 5, 4, 8],
                '实现成本': [8, 9, 9, 6, 5, 6, 7, 5, 4, 7],
                '优先级得分': [8.0, 9.0, 8.7, 6.3, 5.3, 6.7, 8.3, 5.7, 4.3, 7.0],
                '优先级等级': ['高', '高', '高', '中', '低', '中', '高', '中', '低', '中'],
                '排序': [2, 1, 3, 6, 9, 7, 4, 8, 10, 5]
            }
            priority_df = pd.DataFrame(priority_data)
            priority_df.to_excel(writer, sheet_name='⭐需求优先级', index=False)
            print("✅ 已填充需求优先级表")
            
            # 3. 需求状态表
            status_data = {
                '需求ID': ['REQ-001', 'REQ-002', 'REQ-003', 'REQ-004', 'REQ-005', 'REQ-006', 'REQ-007', 'REQ-008', 'REQ-009', 'REQ-010'],
                '需求名称': requirements_data['需求名称'],
                '当前状态': ['已完成', '开发中', '已完成', '设计中', '待开发', '开发中', '开发中', '待开发', '待开发', '待开发'],
                '完成度': [100, 80, 90, 30, 0, 70, 60, 0, 0, 0],
                '负责人': ['张开发', '李前端', '王后端', '张开发', '待分配', '李前端', '王后端', '待分配', '待分配', '待分配'],
                '开始日期': ['2024-01-20', '2024-02-01', '2024-02-15', '2024-03-01', '', '2024-02-20', '2024-03-01', '', '', ''],
                '预计完成': ['2024-02-15', '2024-03-15', '2024-03-10', '2024-04-01', '2024-04-15', '2024-03-20', '2024-04-01', '2024-05-01', '2024-05-15', '2024-06-01'],
                '实际完成': ['2024-02-10', '', '2024-03-05', '', '', '', '', '', '', ''],
                '备注': ['已上线运行', '前端界面开发中', '基础功能完成', '原型设计阶段', '等待排期', 'API开发中', '后台管理开发', '等待需求确认', '低优先级', '数据分析需求']
            }
            status_df = pd.DataFrame(status_data)
            status_df.to_excel(writer, sheet_name='📊需求状态', index=False)
            print("✅ 已填充需求状态表")
            
            # 4. 任务分解表
            task_data = {
                '任务ID': ['TASK-001', 'TASK-002', 'TASK-003', 'TASK-004', 'TASK-005', 'TASK-006', 'TASK-007', 'TASK-008', 'TASK-009', 'TASK-010'],
                '任务名称': [
                    '用户认证API开发',
                    '任务大厅前端界面',
                    '技能评估算法',
                    '挑战系统设计',
                    '知识库数据模型',
                    '用户管理界面',
                    '任务审核流程',
                    '内容编辑器',
                    '评论系统',
                    '数据统计API'
                ],
                '所属需求': ['REQ-001', 'REQ-002', 'REQ-003', 'REQ-004', 'REQ-005', 'REQ-006', 'REQ-007', 'REQ-008', 'REQ-009', 'REQ-010'],
                '任务描述': [
                    '实现用户注册、登录、Token验证等API接口',
                    '开发任务列表、筛选、搜索等前端组件',
                    '设计技能评估算法和认证流程',
                    '设计挑战任务的创建和管理机制',
                    '设计知识库的数据结构和存储方案',
                    '开发用户信息管理的后台界面',
                    '实现任务发布、审核、状态管理流程',
                    '开发富文本编辑器和内容管理功能',
                    '实现文章评论、点赞、回复功能',
                    '开发用户行为和平台数据统计接口'
                ],
                '预估工时': [16, 24, 32, 20, 12, 18, 22, 16, 14, 20],
                '实际工时': [14, 20, 0, 0, 0, 15, 18, 0, 0, 0],
                '负责人': ['张开发', '李前端', '王后端', '张开发', '王后端', '李前端', '王后端', '李前端', '张开发', '王后端'],
                '任务状态': ['已完成', '进行中', '待开始', '设计中', '待开始', '进行中', '进行中', '待开始', '待开始', '待开始']
            }
            task_df = pd.DataFrame(task_data)
            task_df.to_excel(writer, sheet_name='📝任务分解', index=False)
            print("✅ 已填充任务分解表")
            
            # 5. 进度跟踪表
            progress_data = {
                '日期': ['2024-03-01', '2024-03-02', '2024-03-03', '2024-03-04', '2024-03-05', '2024-03-06', '2024-03-07', '2024-03-08', '2024-03-09', '2024-03-10'],
                '任务ID': ['TASK-001', 'TASK-002', 'TASK-001', 'TASK-002', 'TASK-001', 'TASK-006', 'TASK-007', 'TASK-002', 'TASK-006', 'TASK-007'],
                '任务名称': ['用户认证API开发', '任务大厅前端界面', '用户认证API开发', '任务大厅前端界面', '用户认证API开发', '用户管理界面', '任务审核流程', '任务大厅前端界面', '用户管理界面', '任务审核流程'],
                '完成工作': [
                    '完成用户注册API',
                    '完成任务列表组件',
                    '完成登录API',
                    '完成筛选功能',
                    '完成Token验证',
                    '完成用户列表页面',
                    '设计审核流程',
                    '完成搜索功能',
                    '完成用户详情页',
                    '实现审核API'
                ],
                '工时': [4, 6, 4, 5, 3, 5, 4, 6, 4, 5],
                '进度百分比': [30, 25, 60, 45, 100, 35, 20, 65, 55, 40],
                '遇到问题': ['', '样式调整较多', '', 'API接口调试', '', '', '流程复杂需优化', '', '权限控制复杂', ''],
                '下一步计划': ['开始Token管理', '继续搜索功能', '进行集成测试', '完成接单功能', '项目完成', '添加编辑功能', '实现审核界面', '优化用户体验', '添加权限管理', '完成状态管理']
            }
            progress_df = pd.DataFrame(progress_data)
            progress_df.to_excel(writer, sheet_name='📈进度跟踪', index=False)
            print("✅ 已填充进度跟踪表")
            
            # 6. 里程碑规划表
            milestone_data = {
                '里程碑ID': ['M1', 'M2', 'M3', 'M4', 'M5'],
                '里程碑名称': [
                    'MVP版本发布',
                    '用户系统完善',
                    '任务系统上线',
                    '社区功能发布',
                    '平台正式运营'
                ],
                '描述': [
                    '完成基础的用户注册登录和任务浏览功能',
                    '完善用户认证、技能评估等用户相关功能',
                    '完成任务发布、接单、管理等核心功能',
                    '上线社区互动、知识库等社区功能',
                    '平台功能完善，开始正式运营推广'
                ],
                '计划日期': ['2024-03-15', '2024-04-30', '2024-06-15', '2024-08-31', '2024-10-31'],
                '实际日期': ['2024-03-10', '', '', '', ''],
                '完成状态': ['已完成', '进行中', '未开始', '未开始', '未开始'],
                '关键交付物': [
                    '用户注册登录、任务浏览功能',
                    '技能认证体系、用户管理后台',
                    '任务管理系统、审核流程',
                    '社区互动功能、知识库',
                    '完整平台、运营体系'
                ],
                '负责人': ['项目组', '后端团队', '全栈团队', '前端团队', '项目组']
            }
            milestone_df = pd.DataFrame(milestone_data)
            milestone_df.to_excel(writer, sheet_name='🎯里程碑规划', index=False)
            print("✅ 已填充里程碑规划表")
            
            # 7. 风险评估表
            risk_data = {
                '风险ID': ['RISK-001', 'RISK-002', 'RISK-003', 'RISK-004', 'RISK-005'],
                '风险描述': [
                    '技术栈学习成本高',
                    '用户需求变更频繁',
                    '开发人员不足',
                    '第三方服务依赖',
                    '数据安全风险'
                ],
                '风险类型': ['技术风险', '需求风险', '资源风险', '技术风险', '安全风险'],
                '发生概率': ['中', '高', '中', '低', '低'],
                '影响程度': ['中', '高', '高', '中', '高'],
                '风险等级': ['中', '高', '高', '低', '中'],
                '应对策略': [
                    '提前学习，技术调研，寻求技术支持',
                    '加强需求沟通，建立变更流程',
                    '合理安排开发计划，考虑外包',
                    '选择稳定服务商，准备备选方案',
                    '加强安全设计，定期安全审计'
                ],
                '负责人': ['技术负责人', '产品经理', '项目经理', '技术负责人', '安全负责人'],
                '状态': ['监控中', '已发生', '监控中', '监控中', '预防中']
            }
            risk_df = pd.DataFrame(risk_data)
            risk_df.to_excel(writer, sheet_name='⚠️风险评估', index=False)
            print("✅ 已填充风险评估表")
            
        print("\n🎉 PhoenixCoder项目数据填充完成！")
        print("📊 已更新的工作表:")
        print("  - 📋需求收集: 10个核心功能需求")
        print("  - ⭐需求优先级: 优先级评估和排序")
        print("  - 📊需求状态: 当前开发状态跟踪")
        print("  - 📝任务分解: 具体开发任务分解")
        print("  - 📈进度跟踪: 日常开发进度记录")
        print("  - 🎯里程碑规划: 项目关键节点规划")
        print("  - ⚠️风险评估: 项目风险识别和应对")
        
    except Exception as e:
        print(f"❌ 填充数据时出错: {str(e)}")
        import traceback
        traceback.print_exc()

def main():
    """主函数"""
    print("🚀 PhoenixCoder项目数据填充工具")
    print("=" * 80)
    fill_project_data()

if __name__ == "__main__":
    main()